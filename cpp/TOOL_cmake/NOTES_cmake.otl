Références :
	https://alexandre-laurent.developpez.com/tutoriels/cmake/
		quelques exemples d'utilisation en fonction des sources (sources directes, lib interne, lib externe)
	https://florian-goujeon.developpez.com/cours/cmake/initiation/
		quelques usages avancés (recherche automatique des sources, édition du CMakeCache.txt, lib externe, tests)
	https://cmake.org/cmake-tutorial/
		le tuto officiel avec quelques usages avancés
	https://llvm.org/docs/CMakePrimer.html
		une EXCELLENTE revue de la syntaxe des CMakeLists.txt, ne pas hésiter à relire régulièrement la page
	https://hsf-training.github.io/hsf-training-cmake-webpage/
		un bon tuto, que j'ai suivi (et dont les notes brutes sont plus bas)
	https://gist.github.com/mbinna/c61dbb39bca0e4fb7d1f73b0d66a4fd1
		modern cmake : beaucoup de bonnes pratiques à suivre (et mauvaises pratiques à ne pas suivre)
	Autres références vrac sur modern cmake :
		https://levelup.gitconnected.com/simple-modern-cmake-tutorial-b0c1c362cd2c
		https://pabloariasal.github.io/2018/02/19/its-time-to-do-cmake-right/
		https://cliutils.gitlab.io/modern-cmake/
		http://www.saoe.net/blog/using-cmake-with-external-projects/

TL;DR :
	basics :
		CMakeLists.txt  décrit le build et permet de créer un makefile
		cmake .         parse CMakeLists.txt et créée un makefile ("." est le répertoire contenant le CMakeLists.txt)
		make            une fois que cmake a généré le makefile, on peut builder classiquement
	pour builder sans avoir à créer / me déplacer dans un répertoire de build :
		AVANT :
			mkdir build
			cd build
			cmake ../src
			make
		APRES :
			cmake -Bbuild -Hsrc
			make -C build
	répertoires :
		CMAKE_CURRENT_SOURCE_DIR semble être le répertoire analysé par cmake (contenant le CMakeLists.txt)
		CMAKE_CURRENT_BINARY_DIR semble être le répertoire de build de cmake
	installation d'un cmake récent (si celui du système est trop ancien) :
		pipx install cmake

Bonne pratique pour éviter les cmake dirty files = créer un répertoire de build depuis lequel on utilise un CMakeLists.txt situé ailleurs :
	# ici, j'ai mon main.cpp, ainsi que le CMakeLists.txt
	mkdir build
	cd build
	cmake ..

Syntaxe de base :
	https://llvm.org/docs/CMakePrimer.html
	NOTE : ne pas hésiter à relire régulièrement cet excellent document.
	Scope :
		CMake inherently has a directory-based scoping.
		Setting a variable in a CMakeLists file, will set the variable for that file, and all subdirectories.
		Variables set in a CMake module that is included in a CMakeLists file will be set in the scope they are included from, and all subdirectories.
	Cache
		évite d'avoir à refaire tous les checks de zéro au configure-time
	TOUTES les commandes respectent le pattern suivant :
		__NAME__(__ARGS__)
	Lists = semi-colon delimited strings :
		a;b;c;d
		It is strongly advised that you avoid using semi-colons in lists; it doesn’t go smoothly.
	String / File builtin functions.
	Macro vs. Function
		seule différence = les fonctions ont leur propre scope, les macros utilisent le scope de leur appelant
		(i.e. les variables définie dans des macros sont visibles par leur appelant)
	Control-Flow
		notamment, les loops et control-flows n'ont pas leur propre scope (plutôt comme en python que comme en C++)
	Argument parsing (ARGV+ARGN, https://cmake.org/cmake/help/v3.4/module/CMakeParseArguments.html)
		les fonctions/macros acceptent des arguments nommés (obligatoires), et des arguments supplémentaires
			FUNCTION(myfunc myarg1 myarg2 myarg3)
			myfunc nécessite au moins 3 paramètres : l'appel provoque une erreur si on lui en passe moins
			myfunc peut recevoir 4 ou plus paramètres : les arguments supplémentaires ne sont jamais limités
		ARGV contient la liste de tous les arguments (nommés et supplémentaires)
		ARGN contient la liste des arguments supplémentaires uniquement

Bonne pratique = cette page indique : The most commonly used rule is "One CMakeLists.txt per target".
	https://stackoverflow.com/questions/48509911/cmake-add-subdirectory-vs-include

commande "install" = pour copier des fichiers
commande "target_compile_features" = pour indiquer une dépendance à une version particulière du langage

cmake abstrait certaines commandes (cf. "command-line tool mode" dans le man de cmake), exemple pour déplacer des fichiers :
	${CMAKE_COMMAND} -E copy dump-sections ${CMAKE_CURRENT_SOURCE_DIR}/../worker/route_worker

Note d'installation : on peut installer cmake dans un venv :
	intérêt = choisir une version plus récente que dans les dépôts système, sans avoir à installer system-wide
	pip install cmake
	(éventuellement : pip install cmake== pour voir les versions disponibles)
	NOTE : du coup, ça ouvre la voie à une installation via pipx :-)

Ce post contient une astuce pour consulter toutes les variables cmake (utile pour débugger) :
	https://stackoverflow.com/a/9328525

Notion importante = "au configure-time" vs. "au compile-time" :
	configure-time = exécuté par cmake
	compile-time = exécuté par make
	----------------------------------------
	certaines choses (comme execute_process) sont exécutées au configure-time
	d'autres (comme le download d'une archive via external-project) sont exécutées au build-time

questions à comprendre :
	où sont buildés les fichiers ?
	quel est le répertoire cible du binaire (ou des librairies) ?
	où sont les fichiers intérmédiaires ?
	quels sont les fichiers objets créés ?
	comment arrêter la compilation après le préprocessing ?
	où se situe le makefile généré ?
	quelle différence avec le configure-time et le compile-time ?
	Dans quels cas ai-je besoin de refaire le cmake configure ?

Comment mutualiser des flags (e.g. de compilation) pour TOUTES les targets des sous-scripts ?
	il faut "add_compile_options" au lieu de "target_compile_options" (ce qui est logique) :
		https://cmake.org/cmake/help/latest/command/add_compile_options.html
		add_compile_options
		Adds options to the COMPILE_OPTIONS directory property. These options are used when compiling targets from the current directory and below.
	Similairement, il faut utiliser "link_libraries" au lieu de "target_link_libraries" pour mutualiser :
		https://cmake.org/cmake/help/latest/command/link_libraries.html
		Link libraries to all targets added later.

Question : quelles sont les variables propres à cmake, et à quoi servent-elles :
	CMAKE_CURRENT_BINARY_DIR
	CMAKE_CURRENT_LIST_DIR
	[liste non-exhaustive]

L'utilisation de ce module semble être une bonne pratique :
	https://cmake.org/cmake/help/v3.0/module/GNUInstallDirs.html

Différence entre include et add_subdirectory :
	https://cmake.org/pipermail/cmake/2007-November/017897.html
	include = pour factoriser des fonctions custom, du code commun qu'on veut ne définir qu'une fois
	add_subdirectory = un sous-projet indépendant (qui in fine créée une target, a priori, même si j'imagine que ce n'est pas obligatoire)
	----------------------------------------
	typiquement, un même fichier cmake pourra être include plusieurs fois, alors qu'un sous-répertoire sera add_subdirectory qu'une fois (par son parent)

QUESTION cmake : comment connaître toutes les propriétés d'une target ?
	EDIT : on dirait qu'on ne peut pas

C'est pas très clair quelles sont les règles qui gouvernent le re-téléchargement des contenus avec FetchContent ou ExternalProject.

Properties :
	La doc fait beaucoup référence aux "properties", c'est quoi ?
		https://cmake.org/cmake/help/latest/module/FetchContent.html
		FetchContent_GetProperties(<name>)
		The details are stored in a global property, so they are unaffected by things like variable or directory scope.
	On dirait que les properties sont des variables attachées à une target (ou à autre chose) :
		https://stackoverflow.com/questions/49958208/what-is-the-difference-between-cmake-variables-and-properties
	La doc de set_property montre qu'il y a plusieurs scopes possibles :
		https://cmake.org/cmake/help/latest/command/set_property.html
		GLOBAL
		DIRECTORY
		TARGET
		SOURCE
		...

Notes issues de ce talk cmake :
	https://www.youtube.com/watch?v=mKZ-i-UfGgQ
	https://codevion.github.io/#!cpp/cmake.md
	----------------------------------------
	Build directory vs source directory
	Cmake vim plugin
	Apparemment, cmake décourage l'utilisation de glob pour définir la liste des fichiers source :
		https://cmake.org/cmake/help/latest/command/file.html#filesystem
	En gros, c'est pour être sûr que cmake régénére le makefile si un fichier source est ajouté
	Point très très important : le include directory d'une lib est "répercuté" sur l'exécutable qui utilise la lib (si l'include est PUBLIC).
	Dépendance à une lib externe :
		Si la lib est "cmake ready", on peut utiliser find_package.
			Deux modes de fonctionnements :
				module mode (FindXXX.cmake)
				config mode (XXXConfig.cmake)
			On peut définir des sous-composants.
			Définit des variables "résultat".
			Par exemple, pour SFML, on dispose après inclusion de la variable "SFML_INCLUDE_DIR"
		Si la lib n'est pas cmake ready, il faut définir la dépendance manuellement, avec find_library
			Find_library permet d'utiliser une lib installée localement, qu'elle soit une lib système ou une lib custom.

Notes brutes issues de ce tuto cmake :
	https://hsf-training.github.io/hsf-training-cmake-webpage/
	https://hsf-training.github.io/hsf-training-cmake-webpage/about/
		HEP = High Energy Physics (et plus bas, ROOT = https://root.cern/ un framework d'analys de données)
		HSF = HEP Software Foundation facilitates cooperation and common efforts in High Energy Physics software and computing internationally.
	notes sur chacune des pages du tuto :
		https://hsf-training.github.io/hsf-training-cmake-webpage/02-building/index.html
			on peut builder directement via cmake :
				cmake -S . -B build
				cmake --build build
				cmake --build build --target test
			le tuto déconseille de faire un in-source build (et conseille plutôt de bien séparer le répertoire de build et le répertoire des sources)
			la façon recommandée de choisir un compilo est par envvar (à ne faire qu'à la première invocation) :
				CC=clang CXX=clang++ cmake -S . -B build
			à l'invocation de cmake, on peut setter des variables dans le cache cmake.
			pour voir les options d'une config cmake (nécessite un projet cmake fonctionnel) :
				cmake -L  ..
				cmake -LH ..
			Quelques options communes :
				CMAKE_BUILD_TYPE
				CMAKE_INSTALL_PREFIX
				BUILD_SHARED_LIBS
				BUILD_TESTING
			On peut débugger la config cmake elle-même :
				cmake .. --trace-source="build-ultra-binary-data.cmake"  # ne debugge que le fichier précisé
				cmake .. --trace                                         # débugge TOUS les fichiers cmake (très verbeux)
				cmake .. --trace-expand
		https://hsf-training.github.io/hsf-training-cmake-webpage/03-cmakelists/index.html
			la directive "project" est obligatoire (et en pratique, mieux vaut lui préciser le LANGUAGES)
			il existe des formatters / linters cmake :
				https://cmake-format.readthedocs.io/en/latest/
		https://hsf-training.github.io/hsf-training-cmake-webpage/04-targets/index.html
			un mot sur la visibilité des properties des target (le cas typique, c'est le cas où la target est une librairie) :
				PRIVATE   = les propriétés propres à la librairie (e.g. le cpp de cette librairie a besoin de C++14)
				INTERFACE = les propriétés propres à une target qui utilise la librairie (pas hyper clair l'usage que ça pourrait avoir ?)
				PUBLIC    = les propriétés utiles à la fois à la librairie, et à la fois à un exécutable qui l'utilise (e.g. le chemin vers les headers à inclure)
			liste de toutes les commandes cmake, notamment les target_XXX permettant de définir des propriétés des targets :
				https://cmake.org/cmake/help/latest/manual/cmake-commands.7.html
			si on veut définir une target représentant une librairie qui n'a rien à builder (e.g. une lib header-only) :
				add_library(some_header_only_lib INTERFACE)
			si on veut définir une target représentant une librairie DÉJÀ buidlée, il faut utiliser IMPORTED
		https://hsf-training.github.io/hsf-training-cmake-webpage/05-variables/index.html
			on peut exécuter un script cmake sans rien avoir à builder (pratique pour tester des choses liées à cmake) :
				cmake -P myscript.cmake
			cache cmake = variables pérennisées entre les builds
			la commande 'set' permet si on le souhaite de sauvegarder des variables dans le cache (cf. CACHE / FORCE) :
				https://cmake.org/cmake/help/latest/command/set.html
			la commande 'option' semble être un alias pour setter une variable de type booléenne.
			il y a une syntaxe pour accéder et utiliser les envvars
			les properties sont simplement des variables associées à une target (ou plus généralement, à "quelque chose")
			une doc cmake permet de lister toutes les properties :
				https://cmake.org/cmake/help/latest/manual/cmake-properties.7.html
			des commandes utiles pour débugger les variables/properties :
				include(CMakePrintHelpers)
				cmake_print_variables
				cmake_print_properties
			rule of thumb = on ne devrait jamais avoir à reconfigurer un projet
			l'utiliation de GLOB rend plus compliquée l'application de cette bonne pratique...
				(en effet, cmake ne sait pas nécessairement s'il y a des nouveaux fichiers ajoutés)
				solution = utiliser CONFIGURE_DEPENDS (https://cmake.org/cmake/help/latest/command/file.html)
				du coup, une autre rule of thumb concernant l'utilisation de GLOB serait :
					ne jamais utiliser GLOB, mais si on l'utilise tout de même, utiliser CONFIGURE_DEPENDS
		https://hsf-training.github.io/hsf-training-cmake-webpage/06-projectstructure/index.html
			L'exemple donne un snippet utile pour détecter si le projet buildé est le projet principal ou un projet inclus :
				if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)
				# code spécifique au cas où le projet est le projet principal
				endif()
			Par exemple, si le projet cmake est une librairie, on va ne vouloir builder et lancer les tests de la librairie que si c'est le projet principal buildé
				(et pas si la librairie est incluse dans un autre projet cmake)
			L'exemple donne également un cas de add_subdirectory conditionnel : si on n'a pas doxygen d'installé, on ne builde pas la doc.
			Un point de détail : il peut être utile d'ajouter des headers aux SOURCE d'une target (même si ça sert à rien) pour que les IDE considèrent correctement les headers comme faisant partie des sources.
				NOTE : peut-être que ça résout mon problème vim-ALE ?
			Exemple où on veut indiquer à ses utilisateurs qu'il faut au moins C++11 :
				target_compile_features(modern_library PUBLIC cxx_std_11)
			add_test pour ajouter des tests
		https://hsf-training.github.io/hsf-training-cmake-webpage/07-commonproblems/index.html
			rien d'intéressant dans cette page
		https://hsf-training.github.io/hsf-training-cmake-webpage/08-debugging/index.html
			on peut builder différents build (debug / release / ...) dans différents répertoires de build
			on dirait que cmake s'interface avec plein d'outil :
				CMAKE_CXX_COMPILER_LAUNCHER can set up a compiler launcher, like ccache, to speed up your builds.
				CMAKE_CXX_CLANG_TIDY can run clang-tidy to help you clean up your code.
				CMAKE_CXX_CPPCHECK for cppcheck.
				CMAKE_CXX_CPPLINT for cpplint.
				CMAKE_CXX_INCLUDE_WHAT_YOU_USE for iwyu.
		https://hsf-training.github.io/hsf-training-cmake-webpage/09-findingpackages/index.html
			l'appel :
				find_package(MyPackage 1.2)
			This will look for a file in the CMAKE_MODULE_PATH that is named FindMyPackage.cmake.
			If it does not find one, it will look for a file named MyPackageConfig.cmake in several places, including MyPackage_DIR if that variable exists.
			Modificateurs à `find_package` :
				COMPONENTS = on ne requiert qu'un morceau de la dépendance
				REQUIRED   = le build faile si la dépendance est manquante
				QUIET      = diminue l'afficahge
			Environment hints :
				Hinting the installation of software package that is installed outside of a system paths works can also be done with environment variables
				Individual packages locations can be hinted by setting their installation root path in <PackageName>_ROOT.
					export HDF5_ROOT=$HOME/software/hdf5-1.12.0
				Similarly, the variable CMAKE_PREFIX_PATH can be used to hint a list of installation root paths at once:
					export CMAKE_PREFIX_PATH=$HOME/software/hdf5-1.12.0:$HOME/software/boost-1.74.0:$CMAKE_PREFIX_PATH
			Deux façons de faire (dans les deux cas, on recherche un fichier suivant une convention de nommage particulière) :
				MODULE = rechercher FindMyPackage.cmake   (plutôt considérée comme "vieille")
				CONFIG = rechercher MyPackageConfig.cmake (plutôt considérée comme "moderne")
			MODULE = FindMyPackage : ce que j'en comprends, c'est qu'on exécute le script (on le trouve car il suit une convention de nommage donnée) :
				le script peut faire un peu ce qu'il veut, mais sette au moins la variable `MyPackage_FOUND`
				La liste des FindXXX.cmake est ici :
					https://cmake.org/cmake/help/latest/manual/cmake-modules.7.html#find-modules
				La doc de chaque package renseigne sur ce que fait le script, et les variables settées :
					https://cmake.org/cmake/help/latest/module/FindProtobuf.html
					https://cmake.org/cmake/help/latest/module/FindBoost.html
				NdM : ces scripts sont proposés par cmake
			CONFIG = MyPackageConfig.cmake : ce que j'en comprends, c'est que lorsqu'on installe une lib sur son système, on génère ce fichier de config
				derrière, cmake peut l'utiliser directement
				en effet, le script a été généré à l'installation du package, il contient donc les bonnes variables permettant l'utilisation
				NdM : là où le MODULE doit avoir du code capable d'auto-trouver ce qui est pertinent (par exemple, recherchant sur une machine donnée un chemin d'include)...
					... le CONFIG peut voir ces valeurs (e.g. le chemin d'include) générées à l'installation, et écrites en dur dans la config
				La question est donc de savoir si un package donné qu'on installe sur son poste (p.ex. boost, éventuellement via conan) propose un fichier de config ou non.
			POINT IMPORTANT = dans les deux cas (MODULE ou CONFIG), l'appel se fait via :
				find_package(MyPackage 1.2)
			NOTE : les deux approches sont possibles :
				ROOT is an example of a package that is now providing a CONFIG file
				another one that is just beginning to is Boost;
				while CMake includes a FindBoost, it has to be updated with each new Boost release,
				whereas BoostConfig.cmake can be included with each Boost release (first version in 1.70).
				----------------------------------------
			Les deux approches ont la même finalité (et s'utilisent pareil) mais sont différentes :
				FindBoost.cmake (MODULE) est fourni par cmake (script capable de trouver boost sur le poste de l'utilisateur)
				BoostConfig.cmake (CONFIG) est fourni par boost à l'installation (script renseignant les variables indiquant où a été installé boost sur le poste)
				Le contenu du fichier BoostConfig.cmake est intéressant :
					/usr/lib/x86_64-linux-gnu/cmake/Boost-1.71.0/BoostConfig.cmake
					----------------------------------------
					# This CMake configuration file, installed as part of the Boost build
					# and installation procedure done by `b2 install`, provides support
					# for find_package(Boost).
					#
					# It's roughly, but not perfectly, compatible with the behavior
					# of find_package(Boost) as provided by FindBoost.cmake.
					# Since Boost libraries can coexist in many variants - 32/64 bit,
					# static/dynamic runtime, debug/release, the following variables can be used
					# to control which variant is chosen:
					#
					# Boost_USE_DEBUG_LIBS:     When OFF, disables debug libraries.
					# Boost_USE_RELEASE_LIBS:   When OFF, disables release libraries.
				Ce que j'en retire :
					find_package se contente d'exécuter du code, mais il n'y a pas de contrat d'interface (en dehors de setter la variable Boost_FOUND)
					notamment, les deux scripts (MODULE ou CONFIG) ne settent pas les mêmes variables, ou ne fournissent pas les mêmes macros
					on peut contrôler l'exécution du script en définissant des variables avant de l'exécuter (e.g. Boost_USE_DEBUG_LIBS)
					comme sur ce point, les deux méthodes sont compatibles, c'est également documenté dans la doc de FindBoost.cmake : https://cmake.org/cmake/help/latest/module/FindBoost.html
				Intérêt de BoostConfig.cmake sur FindBoost.cmake :
					une nouvelle version de FindBoost.cmake doit être publiée dès qu'une nouvelle release de Boost est publiée
					alors que comme BoostConfig.cmake est packagée AVEC chaque release de boost, la mise à jour se fait "toute seule"
					conséquemment : rule of thumb = essayer d'utiliser XXXConfig.cmake d'abord, et seulement si on n'en trouve pas, chercher des FindXXX.cmake ou l'écrire soi-même
				les rule of thumbs du résumé de la page sont intéressantes aussi :
					A FindMyPackage.cmake file can factor out package discovery for a package you don’t own.
					A MyPackageConfig.cmake helps others find your package.
			QUESTION : si je veux écrire mon propre FindMyPackage.cmake, où est-ce que je le mets pour que find_package le trouve ?
				il faut que j'utilse les hints ?
		https://hsf-training.github.io/hsf-training-cmake-webpage/10-root/index.html
			rien d'intéressant dans cette page
		https://hsf-training.github.io/hsf-training-cmake-webpage/11-functions/index.html
			les arguments sont traités comme des chaînes de caractères -> ils peuvent être utilisés pour construire un nom de variable :
				:function(EXAMPLE_FUNCTION AN_ARGUMENT)
				:    set(${AN_ARGUMENT}_LOCAL "pouet coucou")
				:    set(${AN_ARGUMENT}_PARENT "pouet coucou bis" PARENT_SCOPE)
				:endfunction()
			seul différence fonction / macro :
				toutes les variables définies dans une fonction sont limitées au scope de la fonction (sauf si on utilise PARENT_SCOPE)
				les variables définies dans une macro sont dans le scope de l'appelant
			la façon canonique de parser les arguments d'une fonction / d'une macro est :
				cmake_parse_arguments
				https://cmake.org/cmake/help/latest/command/cmake_parse_arguments.html
			EDIT : j'ai fait une POC sur cmake_parse_arguments
	Autres notes sur un billet de blog en creusant le sujet des interfaces :
		https://leimao.github.io/blog/CMake-Public-Private-Interface/
		cas typique :
			une target L est une librairie, et une target E est un exécutable qui dépend de L
			on s'intéresse à des propriétés qu'on associe à la target L
			par exemple, ça peut être "target_include_directories" ou "target_link_libraries"
		en l'occurence, notre fil rouge pour bien comprendre va être :
			l'application de "target_include_directories" à L
		avec la visibilité PUBLIC = tout se passera comme si on avait ÉGALEMENT défini "target_include_directories" pour E
		avec la visibilité INTERFACE = tout se passera comme si on avait UNIQUEMENT défini "target_include_directories" pour E (et pas pour L)
		avec la visibilité PRIVATE = tout se passera comme si on avait UNIQUEMENT défini "target_include_directories" pour L (et pas pour E)
	cas d'application de :
		PRIVATE : une fonction statique de L dépend d'une dépendance D1 -> quand on builde L, on veut builder également D1, mais E n'a pas à avoir connaissance de D1 :
			target_include_directories(L PRIVATE "/path/to/headers/of/D1")
			target_link_libraries(L PRIVATE D1)
		PUBLIC : lorsqu'on builde L, on veut inclure le répertoire des headers. Lorsqu'on builde E, on veut AUSSI inclure le répertoire des headers :
			target_include_directories(L PUBLIC "/path/to/headers/of/L")
			target_link_libraries(E L)
			# après ces deux lignes, lorsqu'on builde E, cmake utilisera le chemin vers les headers de L (mais pas ceux de D1)
		INTERFACE : L est une lib header-only, qui dépend d'une lib D2 header-only -> on n'a pas besoin de buidler L (car header-only), mais les target nécessitant L doivent avoir connaissance de D2
			target_include_directories(L INTERFACE "/path/to/headers/of/D2")
	autres notes cmake = on dirait qu'il existe un genre de moteur de template :
		https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html
		il s'utilise avec $<...> :
			target_link_libraries(myapp1 PRIVATE lib$<$<LINK_LANGUAGE:C>:other>)

TODO : faire une POC sur find_package pour mieux comprendre comment l'utiliser.

CACHE :
	le cache n'est qu'un simple fichier texte (CMakeCache.txt) qui survit entre les différents appels à cmake
	j'ai fait une POC sur comment définir/supprimer des variables dans le cache

COMMENT FORCER UN REBUILD PARTIEL :
	problème = cmake ne propose pas de cible "make clean thistarget"
	cmake Je vérifie que même sans ccache, si on exécute deux foix cmake+make, la deuxième exécution ne rebuide rien.
	SOLUTION 1 = touch :
		touch MyCustomUsage/MutualizedPreprocess/Graph/*
			ça rebuilde bien la target graphlib et toutes ceux qui en dépendent
	SOLUTION 2 = make clean partiel (dans un sous-répertoire d'un répertoire de build) :
		make -C _build/Preprocess clean
			ça rebuilde bien
	SOLUTION 3 = suppression d'un sous-répertoire du répertoire de build :
		rm -rf _build/MutualizedPreprocess
			ça rebuilde bien
	À noter que sauf merdouilles avec le cache cmake, je pense que cmake est assez grand pour savoir qu'il doit rebuilder :
		si j'ajoute un flag global -> cmake rebuilde bien tout
		sj je modifie un fichierl -> cmake rebuilde bien ceux qui en dépendent
		du coup, forcer le rebuild ne me semble nécessaire que en cas de modifications vis-à-vis du cache ?

GRRR : j'ai pas mal lutté, mais on dirait que cmake empêche (hardcodé dans son code source) certaines inclusions de répertoires :
	https://gitlab.kitware.com/cmake/cmake/-/issues/17966
	/usr/include is listed here as a directory to be excluded from explicit listing on the command line because it is implied by system compilers and explicitly passing it can break their system headers in some cases
	j'ai testé moi-même : je n'arrive pas à inclure le répertoire suivant (qui empêche une segfault avec iwyu) :
		/usr/lib/llvm-10/lib/clang/10.0.0/include
	soit globalement :
		include_directories("/usr/lib/llvm-10/lib/clang/10.0.0/include")
	soit juste pour une target :
		target_include_directories(graphlib SYSTEM BEFORE PUBLIC "/usr/lib/llvm-10/lib/clang/10.0.0/include")
	dans les deux cas, quand je build en mode verbose, je constate que la ligne d'appel à clang ne comporte pas l'include :
		VERBOSE=1 make -j -C _build mytarget
		[...] /usr/lib/ccache/clang++ -Wall -Wextra -Werror -Wunused-parameter [...]   <---- je ne trouve pas mon include là-dedans !
	du coup, j'en suis malheureuesment réduit à ajouter l'include en tant que simple flag de compilation :
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -I/usr/lib/llvm-10/lib/clang/10.0.0/include ")
